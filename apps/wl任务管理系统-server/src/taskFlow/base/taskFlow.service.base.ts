/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TaskFlow as PrismaTaskFlow,
  Task as PrismaTask,
} from "@prisma/client";

export class TaskFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TaskFlowCountArgs, "select">): Promise<number> {
    return this.prisma.taskFlow.count(args);
  }

  async taskFlows(
    args: Prisma.TaskFlowFindManyArgs
  ): Promise<PrismaTaskFlow[]> {
    return this.prisma.taskFlow.findMany(args);
  }
  async taskFlow(
    args: Prisma.TaskFlowFindUniqueArgs
  ): Promise<PrismaTaskFlow | null> {
    return this.prisma.taskFlow.findUnique(args);
  }
  async createTaskFlow(
    args: Prisma.TaskFlowCreateArgs
  ): Promise<PrismaTaskFlow> {
    return this.prisma.taskFlow.create(args);
  }
  async updateTaskFlow(
    args: Prisma.TaskFlowUpdateArgs
  ): Promise<PrismaTaskFlow> {
    return this.prisma.taskFlow.update(args);
  }
  async deleteTaskFlow(
    args: Prisma.TaskFlowDeleteArgs
  ): Promise<PrismaTaskFlow> {
    return this.prisma.taskFlow.delete(args);
  }

  async getTask(parentId: string): Promise<PrismaTask | null> {
    return this.prisma.taskFlow
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }
}
