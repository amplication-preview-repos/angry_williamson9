/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TaskFlowService } from "../taskFlow.service";
import { TaskFlowCreateInput } from "./TaskFlowCreateInput";
import { TaskFlow } from "./TaskFlow";
import { TaskFlowFindManyArgs } from "./TaskFlowFindManyArgs";
import { TaskFlowWhereUniqueInput } from "./TaskFlowWhereUniqueInput";
import { TaskFlowUpdateInput } from "./TaskFlowUpdateInput";

export class TaskFlowControllerBase {
  constructor(protected readonly service: TaskFlowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TaskFlow })
  async createTaskFlow(
    @common.Body() data: TaskFlowCreateInput
  ): Promise<TaskFlow> {
    return await this.service.createTaskFlow({
      data: {
        ...data,

        task: data.task
          ? {
              connect: data.task,
            }
          : undefined,
      },
      select: {
        comments: true,
        createdAt: true,
        fromUser: true,
        id: true,
        status: true,

        task: {
          select: {
            id: true,
          },
        },

        toUser: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TaskFlow] })
  @ApiNestedQuery(TaskFlowFindManyArgs)
  async taskFlows(@common.Req() request: Request): Promise<TaskFlow[]> {
    const args = plainToClass(TaskFlowFindManyArgs, request.query);
    return this.service.taskFlows({
      ...args,
      select: {
        comments: true,
        createdAt: true,
        fromUser: true,
        id: true,
        status: true,

        task: {
          select: {
            id: true,
          },
        },

        toUser: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TaskFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async taskFlow(
    @common.Param() params: TaskFlowWhereUniqueInput
  ): Promise<TaskFlow | null> {
    const result = await this.service.taskFlow({
      where: params,
      select: {
        comments: true,
        createdAt: true,
        fromUser: true,
        id: true,
        status: true,

        task: {
          select: {
            id: true,
          },
        },

        toUser: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TaskFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTaskFlow(
    @common.Param() params: TaskFlowWhereUniqueInput,
    @common.Body() data: TaskFlowUpdateInput
  ): Promise<TaskFlow | null> {
    try {
      return await this.service.updateTaskFlow({
        where: params,
        data: {
          ...data,

          task: data.task
            ? {
                connect: data.task,
              }
            : undefined,
        },
        select: {
          comments: true,
          createdAt: true,
          fromUser: true,
          id: true,
          status: true,

          task: {
            select: {
              id: true,
            },
          },

          toUser: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TaskFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTaskFlow(
    @common.Param() params: TaskFlowWhereUniqueInput
  ): Promise<TaskFlow | null> {
    try {
      return await this.service.deleteTaskFlow({
        where: params,
        select: {
          comments: true,
          createdAt: true,
          fromUser: true,
          id: true,
          status: true,

          task: {
            select: {
              id: true,
            },
          },

          toUser: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
